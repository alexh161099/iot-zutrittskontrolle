[
    {
        "id": "c5ad720c3ac89310",
        "type": "tab",
        "label": "Zutrittskontrolle RFID Projekt",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "ffd6aa17e70ff525",
        "type": "mqtt-broker",
        "name": "Hetzner",
        "broker": "138.199.227.39",
        "port": 1883,
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": 4,
        "keepalive": 60,
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthRetain": "false",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closeRetain": "false",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willRetain": "false",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "e91de4ed28afd169",
        "type": "ui_group",
        "name": "Standard",
        "tab": "",
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "a078520f42eece60",
        "type": "MySQLdatabase",
        "name": "Hetzner SQL",
        "host": "138.199.227.39",
        "port": "3306",
        "db": "rfid_system",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "9a8ce3e50532bcbe",
        "type": "MySQLdatabase",
        "name": "Hetzner_Server",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "rfid_system",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "9b247da4b0d47f20",
        "type": "ui_tab",
        "name": "Serverraum Übersicht",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c2fcfd8f66c2a95c",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD.MM.YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "06fdfb2bc53cadba",
        "type": "ui_group",
        "name": "Servraum Übersicht",
        "tab": "9b247da4b0d47f20",
        "order": 1,
        "disp": true,
        "width": 19,
        "collapse": false,
        "className": ""
    },
    {
        "id": "b664125254252b51",
        "type": "ui_tab",
        "name": "RFID Verwaltung",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "cbe01a2d5d8d6b70",
        "type": "ui_group",
        "name": "Verwaltung RFID Chips",
        "tab": "b664125254252b51",
        "order": 1,
        "disp": true,
        "width": 6,
        "collapse": false,
        "className": ""
    },
    {
        "id": "5dd8e0b1706b9851",
        "type": "mysql2-server",
        "host": "138.199.227.39",
        "port": "3306",
        "username": "rfidadmin",
        "password": "rfid1234",
        "db": "rfid_system",
        "servername": "Hetzner SQL"
    },
    {
        "id": "ec676c2c61547022",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 3,
        "width": 19,
        "height": 1
    },
    {
        "id": "690d1c440439a371",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "10e01b224938ce82",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 6,
        "width": 2,
        "height": 1
    },
    {
        "id": "410e7c76727f6fe9",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "0538a432843e0e47",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 8,
        "width": 2,
        "height": 1
    },
    {
        "id": "ae4039cb3b471e45",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 9,
        "width": 2,
        "height": 1
    },
    {
        "id": "a0e44c278c419a4c",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "d130a0d1a3627675",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 11,
        "width": 2,
        "height": 1
    },
    {
        "id": "35fcf56f264a67d9",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 12,
        "width": 2,
        "height": 1
    },
    {
        "id": "09fec1bfc75b95c2",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "fe10093871f0c517",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 14,
        "width": 2,
        "height": 1
    },
    {
        "id": "7cb58957dcf7fea6",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 15,
        "width": 2,
        "height": 1
    },
    {
        "id": "3919926867a19fe7",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "372bf9c4b5ebed49",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 17,
        "width": 19,
        "height": 1
    },
    {
        "id": "d292153f3a41b49b",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 18,
        "width": 19,
        "height": 1
    },
    {
        "id": "413255983a322e68",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 19,
        "width": 2,
        "height": 1
    },
    {
        "id": "77d03cfbd24c695b",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 21,
        "width": 2,
        "height": 1
    },
    {
        "id": "d20d83f0f549fd32",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 22,
        "width": 2,
        "height": 1
    },
    {
        "id": "746b6858947dc65d",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 23,
        "width": 2,
        "height": 1
    },
    {
        "id": "fc25d4d0555ab027",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 24,
        "width": 2,
        "height": 1
    },
    {
        "id": "8a57103761d83d1c",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 25,
        "width": 2,
        "height": 1
    },
    {
        "id": "52fbca14718f0a4e",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 26,
        "width": 2,
        "height": 1
    },
    {
        "id": "deb554a7fecb3fe9",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 27,
        "width": 2,
        "height": 1
    },
    {
        "id": "cd4646279f216487",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 28,
        "width": 2,
        "height": 1
    },
    {
        "id": "2c8934d2d383f128",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 29,
        "width": 2,
        "height": 1
    },
    {
        "id": "6f55956d71f81ca1",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 30,
        "width": 19,
        "height": 1
    },
    {
        "id": "a9a6c6bad8c2a842",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 31,
        "width": 2,
        "height": 1
    },
    {
        "id": "d8a1581c50c803b9",
        "type": "ui_spacer",
        "z": "c5ad720c3ac89310",
        "name": "spacer",
        "group": "06fdfb2bc53cadba",
        "order": 33,
        "width": 2,
        "height": 1
    },
    {
        "id": "57b166f0eaee0a90",
        "type": "mqtt in",
        "z": "c5ad720c3ac89310",
        "name": "RFID UID vom ESP32 empfangen",
        "topic": "rfid/access",
        "qos": "0",
        "datatype": "json",
        "broker": "ffd6aa17e70ff525",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 160,
        "y": 280,
        "wires": [
            [
                "b18b377fbb73950b"
            ]
        ]
    },
    {
        "id": "b18b377fbb73950b",
        "type": "json",
        "z": "c5ad720c3ac89310",
        "name": "RFID UID aus JSON extrahieren",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 450,
        "y": 280,
        "wires": [
            [
                "6809a048bf39c89c",
                "99e6f3389a64688b"
            ]
        ]
    },
    {
        "id": "6809a048bf39c89c",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Payload",
        "func": "\nmsg.payload = JSON.parse(msg.payload);\n\n// Prüfen, ob UID existiert\nif (!msg.payload.uid) {\n    node.error(\"Fehler: UID ist leer!\", msg);\n    return null;\n}\n\n// SQL-Query vorbereiten\nmsg.topic = \"INSERT INTO access_logs (uid) VALUES (?);\";\nmsg.payload = [msg.payload.uid];\n\nreturn msg;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 280,
        "wires": [
            [
                "914a34b81015346f"
            ]
        ]
    },
    {
        "id": "e32edf27ba1f790c",
        "type": "ui_table",
        "z": "c5ad720c3ac89310",
        "group": "06fdfb2bc53cadba",
        "name": "RFID_Zugriffe",
        "order": 5,
        "width": 15,
        "height": 6,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1440,
        "y": 480,
        "wires": []
    },
    {
        "id": "ccce909fcebe49c5",
        "type": "inject",
        "z": "c5ad720c3ac89310",
        "name": "Tabelle Aktualisieren",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "SELECT uid, timestamp FROM access_logs ORDER BY id DESC LIMIT 10;",
        "x": 500,
        "y": 400,
        "wires": [
            [
                "5ff6a1fef756504d"
            ]
        ]
    },
    {
        "id": "3c564fdbd9013a4c",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Zugriffe formatieren",
        "func": "if (Array.isArray(msg.payload)) {\n    msg.payload = msg.payload.map(row => {\n        return {\n            \"Chip\": row.uid,\n            \"Zeit\": row.timestamp  // keine Umwandlung!\n        };\n    });\n}\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1230,
        "y": 480,
        "wires": [
            [
                "e32edf27ba1f790c"
            ]
        ]
    },
    {
        "id": "a594f7baea9f9065",
        "type": "ui_text_input",
        "z": "c5ad720c3ac89310",
        "name": "uid",
        "label": "Chip UID",
        "tooltip": "",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "uid",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 90,
        "y": 460,
        "wires": [
            [
                "16749d087220b465"
            ]
        ]
    },
    {
        "id": "03eb885e816a8f1d",
        "type": "ui_text_input",
        "z": "c5ad720c3ac89310",
        "name": "name",
        "label": "Name",
        "tooltip": "",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "mode": "text",
        "delay": 300,
        "topic": "name",
        "sendOnBlur": true,
        "className": "",
        "topicType": "str",
        "x": 90,
        "y": 520,
        "wires": [
            [
                "e74ff78df4df9d93"
            ]
        ]
    },
    {
        "id": "f76e746101e436fa",
        "type": "ui_switch",
        "z": "c5ad720c3ac89310",
        "name": "active",
        "label": "Zugriff erlaubt",
        "tooltip": "",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "decouple": "false",
        "topic": "active",
        "topicType": "str",
        "style": "",
        "onvalue": "true",
        "onvalueType": "bool",
        "onicon": "",
        "oncolor": "",
        "offvalue": "false",
        "offvalueType": "bool",
        "officon": "",
        "offcolor": "",
        "animate": false,
        "className": "",
        "x": 90,
        "y": 580,
        "wires": [
            [
                "cb9014736b8c5e57"
            ]
        ]
    },
    {
        "id": "f1beddc297c1b691",
        "type": "ui_button",
        "z": "c5ad720c3ac89310",
        "name": "",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": false,
        "label": "Speichern",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "save",
        "payloadType": "str",
        "topic": "save",
        "topicType": "str",
        "x": 100,
        "y": 780,
        "wires": [
            [
                "6cde582acc5256b3"
            ]
        ]
    },
    {
        "id": "5cd83ae3f6a53aa2",
        "type": "ui_date_picker",
        "z": "c5ad720c3ac89310",
        "name": "valid_from",
        "label": "Gültig von",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "valid_from",
        "topicType": "str",
        "className": "",
        "x": 110,
        "y": 640,
        "wires": [
            [
                "62f8af712d7f03e6"
            ]
        ]
    },
    {
        "id": "19ee994848d70120",
        "type": "ui_date_picker",
        "z": "c5ad720c3ac89310",
        "name": "valid_to",
        "label": "Gültig bis",
        "group": "cbe01a2d5d8d6b70",
        "order": 0,
        "width": 0,
        "height": 0,
        "passthru": true,
        "topic": "valid_to",
        "topicType": "str",
        "className": "",
        "x": 100,
        "y": 700,
        "wires": [
            [
                "733f1ba2dbcee7f4"
            ]
        ]
    },
    {
        "id": "5075593d1602830a",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "SQL-Zeile erstellen (Benutzer)",
        "func": "msg.topic = `INSERT INTO allowed_users (uid, name, active, valid_from, valid_to)\nVALUES ('${msg.payload.uid}', '${msg.payload.name}', ${msg.payload.active ? 1 : 0}, '${msg.payload.valid_from}', '${msg.payload.valid_to}')\nON DUPLICATE KEY UPDATE name='${msg.payload.name}', active=${msg.payload.active ? 1 : 0}, valid_from='${msg.payload.valid_from}', valid_to='${msg.payload.valid_to}'`;\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 480,
        "wires": [
            [
                "7cf14dd502c36dc7"
            ]
        ]
    },
    {
        "id": "6cde582acc5256b3",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "speichern abschließen",
        "func": "msg.payload = {\n  uid: flow.get(\"uid\") || \"\",\n  name: flow.get(\"name\") || \"\",\n  active: flow.get(\"active\") || false,\n  valid_from: flow.get(\"valid_from\") || \"\",\n  valid_to: flow.get(\"valid_to\") || \"\"\n};\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 320,
        "y": 780,
        "wires": [
            [
                "ccb7e92765100fb1"
            ]
        ]
    },
    {
        "id": "16749d087220b465",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "UID speichern (flow)",
        "func": "flow.set(\"uid\", msg.payload);       // oder \"name\", \"active\", ...\nreturn null; // wir senden nichts weiter\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 460,
        "wires": [
            []
        ]
    },
    {
        "id": "e74ff78df4df9d93",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Name speichern (flow)",
        "func": "flow.set(\"name\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 520,
        "wires": [
            []
        ]
    },
    {
        "id": "cb9014736b8c5e57",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Aktiv-Status speichern (flow)",
        "func": "flow.set(\"active\", msg.payload);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 580,
        "wires": [
            []
        ]
    },
    {
        "id": "62f8af712d7f03e6",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": " Startdatum speichern (flow)",
        "func": "flow.set(\"valid_from\", msg.payload);\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 640,
        "wires": [
            []
        ]
    },
    {
        "id": "733f1ba2dbcee7f4",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Enddatum speichern (flow)",
        "func": "flow.set(\"valid_to\", msg.payload);\nreturn null;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 700,
        "wires": [
            []
        ]
    },
    {
        "id": "ccb7e92765100fb1",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "SQL-Zeile generieren (Benutzerverwaltung)",
        "func": "let d = msg.payload;\n\n// Funktion: Timestamp in lesbares Datum umwandeln\nfunction format(ms) {\n  const date = new Date(ms);\n  return date.toISOString().slice(0, 19).replace(\"T\", \" \");\n}\n\nlet valid_from = format(d.valid_from);\nlet valid_to = format(d.valid_to);\n\nmsg.topic = `\n  INSERT INTO allowed_users (uid, name, active, valid_from, valid_to)\n  VALUES (\n    '${d.uid}',\n    '${d.name}',\n    ${d.active ? 1 : 0},\n    '${valid_from}',\n    '${valid_to}'\n  )\n  ON DUPLICATE KEY UPDATE\n    name = VALUES(name),\n    active = VALUES(active),\n    valid_from = VALUES(valid_from),\n    valid_to = VALUES(valid_to)\n`;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 630,
        "y": 780,
        "wires": [
            [
                "7cf14dd502c36dc7"
            ]
        ]
    },
    {
        "id": "5ff6a1fef756504d",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "access_logs_query",
        "func": "msg.topic = \"SELECT uid, timestamp FROM access_logs ORDER BY id DESC LIMIT 10\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 730,
        "y": 400,
        "wires": [
            [
                "7cf14dd502c36dc7"
            ]
        ]
    },
    {
        "id": "7cf14dd502c36dc7",
        "type": "mysql",
        "z": "c5ad720c3ac89310",
        "mydb": "9a8ce3e50532bcbe",
        "name": "SQL Benutzerverwaltung",
        "x": 990,
        "y": 480,
        "wires": [
            [
                "3c564fdbd9013a4c"
            ]
        ]
    },
    {
        "id": "914a34b81015346f",
        "type": "mysql",
        "z": "c5ad720c3ac89310",
        "mydb": "9a8ce3e50532bcbe",
        "name": "Zutritt speichern (Datenbank)",
        "x": 1020,
        "y": 280,
        "wires": [
            []
        ],
        "info": "INSERT INTO access_logs (uid) VALUES (?);\r\n"
    },
    {
        "id": "99e6f3389a64688b",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Zugriffsprüfung vorbereiten",
        "func": "msg.payload = JSON.parse(msg.payload); // JSON-String → Objekt\nmsg.topic = \"SELECT * FROM allowed_users WHERE uid = '\" + msg.payload.uid + \"' AND active = 1 AND NOW() BETWEEN valid_from AND valid_to\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 160,
        "wires": [
            [
                "e349b125912e5687"
            ]
        ]
    },
    {
        "id": "e349b125912e5687",
        "type": "mysql",
        "z": "c5ad720c3ac89310",
        "mydb": "9a8ce3e50532bcbe",
        "name": "Zugriffsprüfung (SQL)",
        "x": 800,
        "y": 160,
        "wires": [
            [
                "1853135814901775"
            ]
        ],
        "info": "INSERT INTO access_logs (uid) VALUES (?);\r\n"
    },
    {
        "id": "1853135814901775",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Relais bei Zutritt freischalten",
        "func": "if (msg.payload.length > 0) {\n    msg.payload = \"unlock\";  // Signal zum Schalten\n    return msg;\n} else {\n    return null;  // Kein Zugriff\n}\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1060,
        "y": 160,
        "wires": [
            [
                "e2a79d52e72a576f"
            ]
        ]
    },
    {
        "id": "e2a79d52e72a576f",
        "type": "mqtt out",
        "z": "c5ad720c3ac89310",
        "name": "Unlock an ESP32 senden",
        "topic": "esp32/relay",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffd6aa17e70ff525",
        "x": 1330,
        "y": 160,
        "wires": []
    },
    {
        "id": "a224e923f6102f3a",
        "type": "mqtt in",
        "z": "c5ad720c3ac89310",
        "name": "Klima-Daten vom ESP32",
        "topic": "esp32/klima",
        "qos": "2",
        "datatype": "json",
        "broker": "ffd6aa17e70ff525",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 1040,
        "wires": [
            [
                "4eb03be91abbf8fc",
                "87069e11889abed4"
            ]
        ]
    },
    {
        "id": "673cea1da5ad251b",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Ergebnisse aufbereiten",
        "func": "if (msg.payload.length > 0) {\n    return {\n        payload: {\n            temperatur: msg.payload[0].temperatur + \" °C\",\n            feuchtigkeit: msg.payload[0].feuchtigkeit + \" %\"\n        }\n    };\n}\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1070,
        "y": 940,
        "wires": [
            [
                "31580cba1a71e485",
                "80f55c1e50f2d7f2"
            ]
        ]
    },
    {
        "id": "145eebee3aec2d3f",
        "type": "inject",
        "z": "c5ad720c3ac89310",
        "name": "Regelmäßige Klimaabfrage starten",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "5",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 940,
        "wires": [
            [
                "4eb03be91abbf8fc"
            ]
        ]
    },
    {
        "id": "bd24b646dbceb2a2",
        "type": "mysql",
        "z": "c5ad720c3ac89310",
        "mydb": "9a8ce3e50532bcbe",
        "name": "SQL Klima lesen/speichern",
        "x": 780,
        "y": 940,
        "wires": [
            [
                "673cea1da5ad251b",
                "f3631a5db9d1653b"
            ]
        ]
    },
    {
        "id": "4eb03be91abbf8fc",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Letzten Klima-Wert abfragen",
        "func": "msg.topic = \"SELECT temperatur, feuchtigkeit FROM klima_log ORDER BY id DESC LIMIT 1\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 500,
        "y": 940,
        "wires": [
            [
                "bd24b646dbceb2a2"
            ]
        ]
    },
    {
        "id": "87069e11889abed4",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Klima-Daten speichern",
        "func": "let t = msg.payload.temperatur;\nlet h = msg.payload.feuchtigkeit;\n\nmsg.topic = \"INSERT INTO klima_log (temperatur, feuchtigkeit) VALUES (?, ?);\";\nmsg.payload = [t, h];\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 1040,
        "wires": [
            [
                "bd24b646dbceb2a2"
            ]
        ]
    },
    {
        "id": "80f55c1e50f2d7f2",
        "type": "ui_gauge",
        "z": "c5ad720c3ac89310",
        "name": "Luftfeuchtigkeit Anzeige",
        "group": "06fdfb2bc53cadba",
        "order": 2,
        "width": 10,
        "height": 8,
        "gtype": "gage",
        "title": "Luftfeuchtigkeit",
        "label": "%",
        "format": "{{msg.payload.feuchtigkeit}}",
        "min": 0,
        "max": "100",
        "colors": [
            "#24a2f0",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1330,
        "y": 1000,
        "wires": []
    },
    {
        "id": "31580cba1a71e485",
        "type": "ui_gauge",
        "z": "c5ad720c3ac89310",
        "name": "Temperatur Anzeige",
        "group": "06fdfb2bc53cadba",
        "order": 1,
        "width": 9,
        "height": 8,
        "gtype": "gage",
        "title": "Temperatur",
        "label": "°C",
        "format": "{{msg.payload.temperatur}}",
        "min": 0,
        "max": "50",
        "colors": [
            "#0300b3",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1320,
        "y": 940,
        "wires": []
    },
    {
        "id": "a5554fd62abc6d7a",
        "type": "inject",
        "z": "c5ad720c3ac89310",
        "name": "Klima-Tabelle regelmäßig abfragen",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "10",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 190,
        "y": 1120,
        "wires": [
            [
                "331e705ae09ff8ab"
            ]
        ]
    },
    {
        "id": "331e705ae09ff8ab",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "SQL für Klima-Tabelle",
        "func": "msg.topic = \"SELECT temperatur, feuchtigkeit, timestamp FROM klima_log ORDER BY id DESC LIMIT 10;\";\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 1120,
        "wires": [
            [
                "bd24b646dbceb2a2"
            ]
        ]
    },
    {
        "id": "f3631a5db9d1653b",
        "type": "function",
        "z": "c5ad720c3ac89310",
        "name": "Klima-Daten formatieren",
        "func": "msg.payload = msg.payload.map(e => {\n    return {\n        Temperatur: e.temperatur + \" °C\",\n        Feuchtigkeit: e.feuchtigkeit + \" %\",\n        Zeit: e.timestamp\n    }\n});\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1030,
        "y": 1140,
        "wires": [
            [
                "c3bcbb9f66e28ba7"
            ]
        ]
    },
    {
        "id": "c3bcbb9f66e28ba7",
        "type": "ui_table",
        "z": "c5ad720c3ac89310",
        "group": "06fdfb2bc53cadba",
        "name": "Klima",
        "order": 20,
        "width": 15,
        "height": 5,
        "columns": [],
        "outputs": 0,
        "cts": false,
        "x": 1230,
        "y": 1140,
        "wires": []
    },
    {
        "id": "4efed0d47a940e74",
        "type": "ui_button",
        "z": "c5ad720c3ac89310",
        "name": "",
        "group": "06fdfb2bc53cadba",
        "order": 32,
        "width": 15,
        "height": 1,
        "passthru": false,
        "label": "Tür öffnen",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "unlock",
        "payloadType": "str",
        "topic": "esp32/relais",
        "topicType": "str",
        "x": 110,
        "y": 1200,
        "wires": [
            [
                "8cfbc79580152115"
            ]
        ]
    },
    {
        "id": "8cfbc79580152115",
        "type": "mqtt out",
        "z": "c5ad720c3ac89310",
        "name": "",
        "topic": "esp32/relay",
        "qos": "",
        "retain": "",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "ffd6aa17e70ff525",
        "x": 310,
        "y": 1200,
        "wires": []
    },
    {
        "id": "5e4321f52bbfc4ca",
        "type": "comment",
        "z": "c5ad720c3ac89310",
        "name": "Hauptfunktion – Zutrittskontrolle & Klimaanzeige",
        "info": "Das ist eine RFID-Zutrittskontrolle mit einem\nESP32.\n\nWenn man eine RFID-Karte scannt, prüft das \nSystem, ob sie gültig ist.\nWenn ja, wird ein Relais aktiviert \n(Tür öffnet sich) und der Zugriff wird \ngespeichert.\n\nAußerdem zeigt das System die Temperatur und \nLuftfeuchtigkeit im Raum an.",
        "x": 200,
        "y": 60,
        "wires": []
    }
]